import torch
import torch.nn as nn
#from .modules import VGG_FeatureExtractor, BidirectionalLSTM
from .modules import ResNet_FeatureExtractor, BidirectionalLSTM

class Model(nn.Module):
    print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!모델에 내가 만든 모델.py 들어옴 num_class nn.Module: {nn.Module}')

    def __init__(self, input_channel, output_channel, hidden_size, num_class):
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init input_channel : {input_channel}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init output_channel : {output_channel}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init hidden_size : {hidden_size}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init num_class : {num_class}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init Model : {Model}')
        # print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init self : {self}')
        # print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 Model init self : {self}')
        super(Model, self).__init__()
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기전?????  self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기전?????  Model : {Model}')

        """ FeatureExtraction """
        # self.FeatureExtraction = VGG_FeatureExtractor()
        self.FeatureExtraction = VGG_FeatureExtractor(input_channel, output_channel)
        self.FeatureExtraction_output = output_channel
        self.AdaptiveAvgPool = nn.AdaptiveAvgPool2d((None, 1))

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기후후후?????  self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기후후후?????  Model : {Model}')

        self.SequenceModeling = nn.Sequential(
            BidirectionalLSTM(self.FeatureExtraction_output, hidden_size, hidden_size),
            BidirectionalLSTM(hidden_size, hidden_size, hidden_size)
        )
        self.SequenceModeling_output = hidden_size

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init SequenceModeling 에러나기후후후?????  self : {self}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init SequenceModeling 에러나기후후후?????  Model : {Model}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init SequenceModeling 에러나기후후후?????  hidden_size : {hidden_size}')

        self.Prediction = nn.Linear(self.SequenceModeling_output, num_class)

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init Prediction 에러나기후후후?????  self : {self}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init Prediction 에러나기후후후?????  Model : {Model}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!모델에 내가 만든 모델 __init__ self : {self}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!모델에 내가 만든 모델 __init__ self.call_super_init : {self.call_super_init}')

        # self.call_super_init

    # def forward(self, x):
    def forward(self, input, text):
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 x : {input}')

        # 입력의 크기 및 형태를 확인하기 위한 프린트문 추가
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 입력 데이터 확인: {input.size()}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 입력 데이터 확인 x  size: {input.size()[0]}, {input.size()[1]},{input.size()[2]}, {input.size()[3]}')

        origin_x = input

        # 1, 1,102, 204
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전 x : {origin_x}')
        # print(
        #     f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전  size: {origin_x.size()[0]}, {origin_x.size()[1]}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전  size: {origin_x.size()[0]}, {origin_x.size()[1]},  {origin_x.size()[2]},  {origin_x.size()[3]}')
        # print(
        #     f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전  size: {origin_x.size()[0]}, {origin_x.size()[1]},  {origin_x.size()[2]},  {origin_x.size()[3]}  ')

        # Feature extraction
        visual_feature = self.FeatureExtraction(input)

        # 1, 512,3, 46
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 후 x : {visual_feature}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 후 x  size: {visual_feature.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 후 x  size: {visual_feature.size()[0]}, {visual_feature.size()[1]},{visual_feature.size()[2]}, {visual_feature.size()[3]}')
        # print(
        #     f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x size : {x.size()[0]}, {x.size()[1]}')

        permute = visual_feature.permute(0, 3, 1, 2)
        visual_feature = self.AdaptiveAvgPool(visual_feature.permute(0, 3, 1, 2))

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x : {permute}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x size : {permute.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x  size: {permute.size()[0]}, {permute.size()[1]},{permute.size()[2]}, {permute.size()[3]}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 AdaptiveAvgPool 후 x : {visual_feature}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 AdaptiveAvgPool 후 x size : {visual_feature.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 AdaptiveAvgPool 후 x  size: {visual_feature.size()[0]}, {visual_feature.size()[1]},{visual_feature.size()[2]}, {visual_feature.size()[3]}')

        # x = x.view(x.size(0), x.size(1), -1)
        visual_feature = visual_feature.squeeze(3)

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 x.view(x.size(0), x.size(1), -1) 후 x : {visual_feature}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 x.view(x.size(0), x.size(1), -1) 후 x size : {visual_feature.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 view 후 x size : {visual_feature.size()[0]}, {visual_feature.size()[1]}, {visual_feature.size()[2]}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 self.SequenceModeling 전달하기 최종 전 1572864 ????? size : {visual_feature.size()[0]}, {visual_feature.size()[1]}, {visual_feature.size()[2]}')
        # x = self.SequenceModeling(x)

        # 익스트렉트 전 : 1, 1,102, 204 -> 익스트렉트 : 1, 512,3, 46 ->  퍼뮤트 : 1, 46,512, 3 -> 최종 뷰 : 1, 46, 1536
        # Sequence modeling

        contextual_feature = self.SequenceModeling(visual_feature)

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 SequenceModeling 후 contextual_feature : {contextual_feature}')

        # Prediction
        # x = self.Prediction(x)
        prediction = self.Prediction(contextual_feature.contiguous())

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Prediction 후 prediction : {prediction}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 최종 리턴전 모델 호출시 파이토치에서 내부적으로 이함수를 호출한대 prediction : {prediction}')

        return prediction

# # 모델 인스턴스 생성
# model = Model(input_channel=1, output_channel=1, hidden_size=46, num_class=1536)
#
# # 더미 데이터 생성
# dummy_input = torch.randn(1, 1, 102, 204)
#
# # 순전파 수행
# output = model(dummy_input)
#
# # 각 레이어에서의 출력 크기 확인
# print(f"Output size after FeatureExtraction: {output.size()}")
#
# # FeatureExtraction 이후의 출력 크기 확인
# print(f"Size after FeatureExtraction: {model.FeatureExtraction(dummy_input).size()}")
#
# # SequenceModeling 이후의 출력 크기 확인
# print(f"Size after SequenceModeling: {model.SequenceModeling(model.FeatureExtraction(dummy_input)).size()}")