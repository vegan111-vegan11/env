import torch
import torch.nn as nn

import os

# 현재 파일의 경로
current_file_path = os.path.abspath(__file__)
print("현재 파일의 경로:", current_file_path)

#
# class VGG_FeatureExtractor(nn.Module):
#     print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든거 VGG_FeatureExtractor 클래스 들어옴 nn.Module: {nn.Module}')
#
#
#
#     def __init__(self):
#         print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든거 VGG_FeatureExtractor 클래스 __init__ 들어옴 self:  ')
#
#         super(VGG_FeatureExtractor, self).__init__()
#
#         print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든거 VGG_FeatureExtractor 클래스 __init__ 들어옴 super__init__ 함수 호출후 self:  ')
#
#
#         # Feature extraction layers (ConvNet)
#         # self.features = nn.Sequential(
#         self.ConvNet = nn.Sequential(
#             nn.Conv2d(1, 64, kernel_size=3, stride=1, padding=1),
#             nn.ReLU(inplace=True),
#             nn.MaxPool2d(kernel_size=2, stride=2),
#             nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
#             nn.ReLU(inplace=True),
#             nn.MaxPool2d(kernel_size=2, stride=2),
#             nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),
#             nn.ReLU(inplace=True),
#             nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
#             nn.ReLU(inplace=True),
#             nn.MaxPool2d(kernel_size=(2, 1), stride=(2, 1)),
#             nn.Conv2d(256, 512, kernel_size=3, stride=1, bias=False),
#             nn.BatchNorm2d(512),
#             nn.ReLU(inplace=True),
#             nn.Conv2d(512, 512, kernel_size=3, stride=1, bias=False),
#             nn.BatchNorm2d(512),
#             nn.ReLU(inplace=True),
#             nn.MaxPool2d(kernel_size=(2, 1), stride=(2, 1)),
#             nn.Conv2d(512, 512, kernel_size=2, stride=1),
#             nn.ReLU(inplace=True)
#         )
#
#         print(
#             f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든거 VGG_FeatureExtractor 클래스 __init__ 들어옴 self.ConvNet 설정 호출후 self:  ')
#
#
#     def forward(self, x):
#         print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor forward 함수 들어옴 self : {self}')
#         print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor forward 함수 들어옴 x : {x}')
#
#         print(
#             f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor forward 함수 들어옴 x ConvNet전전전  size: {x.size()[0]}, {x.size()[1]},{x.size()[2]}, {x.size()[3]}')
#
#
#         #x = self.features(x)
#         x = self.ConvNet(x)
#
#         print(
#             f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor forward 함수 들어옴 x ConvNet 후후후  size: {x.size()[0]}, {x.size()[1]},{x.size()[2]}, {x.size()[3]}')
#
#
#         #self.
#         return x

class VGG_FeatureExtractor(nn.Module):

    def __init__(self, input_channel, output_channel=256):

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor __init__ input_channel : {input_channel}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor__init__ output_channel : {output_channel}')

        super(VGG_FeatureExtractor, self).__init__()
        self.output_channel = [int(output_channel / 8), int(output_channel / 4),
                               int(output_channel / 2), output_channel]

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor __init__ self.output_channel : {self.output_channel}')



        # self.ConvNet = nn.Sequential(
        #     nn.Conv2d(input_channel, self.output_channel[0], 3, 1, 1), nn.ReLU(True),
        #     nn.MaxPool2d(2, 2),
        #     nn.Conv2d(self.output_channel[0], self.output_channel[1], 3, 1, 1), nn.ReLU(True),
        #     nn.MaxPool2d(2, 2),
        #     nn.Conv2d(self.output_channel[1], self.output_channel[2], 3, 1, 1), nn.ReLU(True),
        #     nn.Conv2d(self.output_channel[2], self.output_channel[2], 3, 1, 1), nn.ReLU(True),
        #     nn.MaxPool2d((2, 1), (2, 1)),
        #     nn.Conv2d(self.output_channel[2], self.output_channel[3], 3, 1, 1, bias=False),
        #     nn.BatchNorm2d(self.output_channel[3]), nn.ReLU(True),
        #     nn.Conv2d(self.output_channel[3], self.output_channel[3], 3, 1, 1, bias=False),
        #     nn.BatchNorm2d(self.output_channel[3]), nn.ReLU(True),
        #     nn.MaxPool2d((2, 1), (2, 1)),
        #     nn.Conv2d(self.output_channel[3], self.output_channel[3], 2, 1, 0), nn.ReLU(True))

        self.ConvNet = nn.Sequential(
            nn.Conv2d(input_channel, self.output_channel[0], 3, 1, 1),
            nn.ReLU(True),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(self.output_channel[0], self.output_channel[1], 3, 1, 1),
            nn.ReLU(True),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(self.output_channel[1], self.output_channel[2], 3, 1, 1),
            nn.ReLU(True),
            nn.Conv2d(self.output_channel[2], self.output_channel[2], 3, 1, 1),
            nn.ReLU(True),
            nn.MaxPool2d((2, 1), (2, 1)),
            nn.Conv2d(self.output_channel[2], self.output_channel[3], 3, 1, 1, bias=False),
            nn.BatchNorm2d(self.output_channel[3]),
            nn.ReLU(True),
            nn.Conv2d(self.output_channel[3], self.output_channel[3], 3, 1, 1, bias=False),
            nn.BatchNorm2d(self.output_channel[3])
        #,
            # nn.ReLU(True),
            # nn.MaxPool2d((2, 1), (2, 1)),
            # nn.Conv2d(self.output_channel[3], self.output_channel[3], 2, 1, 0),
            # nn.ReLU(True))

    def forward(self, input):
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor forward 함수   input : {input}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 VGG_FeatureExtractor forward 함수   self.ConvNet(input) : {self.ConvNet(input)}')

        return self.ConvNet(input)

class BidirectionalLSTM(nn.Module):
    print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 들어옴 nn.Module : {nn.Module}')



    def __init__(self, in_size, hidden_size, num_class):
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 들어옴 __init__ in_size: {in_size}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 들어옴 __init__ hidden_size: {hidden_size}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 들어옴 __init__ num_class: {num_class}')
        
        super(BidirectionalLSTM, self).__init__()

        

        
        self.rnn = nn.LSTM(in_size, hidden_size, bidirectional=True, batch_first=True)
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!self.rnn : {self.rnn}')
        
        
        self.linear = nn.Linear(hidden_size * 2, num_class)
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 들어옴 __init__ 완료 : {in_size}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 이닛함수 가중치 정리 전 self : {self}')
        
        # LSTM 가중치 정리
        #self.rnn.flatten_parameters()

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!BidirectionalLSTM 클래스 이닛함수 가중치 정리 후 self : {self}')
        
    def forward(self, input):
        """
                input : visual feature [batch_size x T x input_size]
                output : contextual feature [batch_size x T x output_size]
                """
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 x : {input}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 type(x) : {type(input)}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 type(x.size) : {input.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 x size : {input.size()[0]}, {input.size()[1]}, {input.size()[2]}')

        #print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 x size : {x.size[0]}, {x.size[1]}, {x.size[2]}')

        #self.rnn.flatten_parameters()  # LSTM 가중치 정리
        try:  # multi gpu needs this
            self.rnn.flatten_parameters()
        except:  # quantization doesn't work with this
            pass
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 LSTM 가중치 정리 후 self : {self}')

        recurrent, _ = self.rnn(input) # batch_size x T x input_size -> batch_size x T x (2*hidden_size)
        
        #self.rnn
        
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 self.rnn(x) 후 recurrent : {recurrent}')
        
        output = self.linear(recurrent) # batch_size x T x output_size

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 None_VGG 클래스 BidirectionalLSTM forward 함수 들어옴 self.linear 후 output : {output}')
        
        return output


class Model(nn.Module):
    print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!모델에 내가 만든 모델.py 들어옴 num_class nn.Module: {nn.Module}')

    def __init__(self, input_channel, output_channel, hidden_size, num_class):
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init input_channel : {input_channel}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init output_channel : {output_channel}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init hidden_size : {hidden_size}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init num_class : {num_class}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init Model : {Model}')
        #print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init self : {self}')
        # print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 Model init self : {self}')
        super(Model, self).__init__()
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기전?????  self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기전?????  Model : {Model}')

        """ FeatureExtraction """
        #self.FeatureExtraction = VGG_FeatureExtractor()
        self.FeatureExtraction = VGG_FeatureExtractor(input_channel, output_channel)
        self.FeatureExtraction_output = output_channel
        self.AdaptiveAvgPool = nn.AdaptiveAvgPool2d((None, 1))

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기후후후?????  self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init 에러나기후후후?????  Model : {Model}')
        
        
        self.SequenceModeling = nn.Sequential(
            BidirectionalLSTM(self.FeatureExtraction_output, hidden_size, hidden_size),
            BidirectionalLSTM(hidden_size, hidden_size, hidden_size)
        )
        self.SequenceModeling_output = hidden_size

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init SequenceModeling 에러나기후후후?????  self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init SequenceModeling 에러나기후후후?????  Model : {Model}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init SequenceModeling 에러나기후후후?????  hidden_size : {hidden_size}')
        
        self.Prediction = nn.Linear(self.SequenceModeling_output, num_class)

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init Prediction 에러나기후후후?????  self : {self}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!None_VGG_BiLSTM_CTC 내가 만든 모델 Model init Prediction 에러나기후후후?????  Model : {Model}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!모델에 내가 만든 모델 __init__ self : {self}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!모델에 내가 만든 모델 __init__ self.call_super_init : {self.call_super_init}')
        
        #self.call_super_init

    #def forward(self, x):
    def forward(self, input, text):
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 self : {self}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 x : {input}')

        # 입력의 크기 및 형태를 확인하기 위한 프린트문 추가
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 입력 데이터 확인: {input.size()}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 입력 데이터 확인 x  size: {input.size()[0]}, {input.size()[1]},{input.size()[2]}, {input.size()[3]}')

        origin_x = input

        # 1, 1,102, 204
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전 x : {origin_x}')
        # print(
        #     f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전  size: {origin_x.size()[0]}, {origin_x.size()[1]}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전  size: {origin_x.size()[0]}, {origin_x.size()[1]},  {origin_x.size()[2]},  {origin_x.size()[3]}')
        # print(
        #     f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 전  size: {origin_x.size()[0]}, {origin_x.size()[1]},  {origin_x.size()[2]},  {origin_x.size()[3]}  ')



        # Feature extraction
        visual_feature = self.FeatureExtraction(input)

        # 1, 512,3, 46
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 후 x : {visual_feature}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 후 x  size: {visual_feature.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Feature extraction 후 x  size: {visual_feature.size()[0]}, {visual_feature.size()[1]},{visual_feature.size()[2]}, {visual_feature.size()[3]}')
        # print(
        #     f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x size : {x.size()[0]}, {x.size()[1]}')

        permute = visual_feature.permute(0, 3, 1, 2)
        visual_feature = self.AdaptiveAvgPool(visual_feature.permute(0, 3, 1, 2))

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x : {permute}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x size : {permute.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 permute 후 x  size: {permute.size()[0]}, {permute.size()[1]},{permute.size()[2]}, {permute.size()[3]}')

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 AdaptiveAvgPool 후 x : {visual_feature}')
        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 AdaptiveAvgPool 후 x size : {visual_feature.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 AdaptiveAvgPool 후 x  size: {visual_feature.size()[0]}, {visual_feature.size()[1]},{visual_feature.size()[2]}, {visual_feature.size()[3]}')

        # x = x.view(x.size(0), x.size(1), -1)
        visual_feature = visual_feature.squeeze(3)

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 x.view(x.size(0), x.size(1), -1) 후 x : {visual_feature}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 x.view(x.size(0), x.size(1), -1) 후 x size : {visual_feature.size}')
        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 view 후 x size : {visual_feature.size()[0]}, {visual_feature.size()[1]}, {visual_feature.size()[2]}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 self.SequenceModeling 전달하기 최종 전 1572864 ????? size : {visual_feature.size()[0]}, {visual_feature.size()[1]}, {visual_feature.size()[2]}')
        # x = self.SequenceModeling(x)

        
        # 익스트렉트 전 : 1, 1,102, 204 -> 익스트렉트 : 1, 512,3, 46 ->  퍼뮤트 : 1, 46,512, 3 -> 최종 뷰 : 1, 46, 1536
        # Sequence modeling






        contextual_feature = self.SequenceModeling(visual_feature)

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 SequenceModeling 후 contextual_feature : {contextual_feature}')
        

        # Prediction
        #x = self.Prediction(x)
        prediction = self.Prediction(contextual_feature.contiguous())

        print(f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 Prediction 후 prediction : {prediction}')

        print(
            f'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!내가 만든 모델 클래스 forward 함수 들어옴 최종 리턴전 모델 호출시 파이토치에서 내부적으로 이함수를 호출한대 prediction : {prediction}')

        return prediction


# # 모델 인스턴스 생성
# model = Model(input_channel=1, output_channel=1, hidden_size=46, num_class=1536)
# 
# # 더미 데이터 생성
# dummy_input = torch.randn(1, 1, 102, 204)
# 
# # 순전파 수행
# output = model(dummy_input)
# 
# # 각 레이어에서의 출력 크기 확인
# print(f"Output size after FeatureExtraction: {output.size()}")
# 
# # FeatureExtraction 이후의 출력 크기 확인
# print(f"Size after FeatureExtraction: {model.FeatureExtraction(dummy_input).size()}")
# 
# # SequenceModeling 이후의 출력 크기 확인
# print(f"Size after SequenceModeling: {model.SequenceModeling(model.FeatureExtraction(dummy_input)).size()}")